/*! For license information please see preview-service-worker.js.LICENSE.txt */
(()=>{"use strict";var e={80213:(e,t,s)=>{s.d(t,{DK:()=>r,qT:()=>i});const i=location&&location.host.endsWith(".github.io")?location.pathname.substring(0,location.pathname.lastIndexOf("/")+1):"/",r="PreviewCache";location&&location.origin}},t={};function s(i){var r=t[i];if(void 0!==r)return r.exports;var n=t[i]={exports:{}};return e[i](n,n.exports,s),n.exports}s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);class i{constructor(e,t,s,i,r=""){if(this.target=null,this.type=t,this.listener=s,this.options=i,"string"==typeof e||e instanceof String){if(this.target=document.getElementById(r+e),!this.target)throw new Error(`Unable to find element ${r}${e}!`)}else this.target=e;if(!this.target)throw new Error(`Undefined event target: ${this.target}!`);if("function"!=typeof s)throw new Error(`Listener is not a function: ${s}!`)}}class r{constructor(e="Events",t="",s=void 0){this.name=e||"",this.prefix=t||"",this.scope=s,this.listener_=[]}listen(e,t,s,r=!1,n=!1,o=!1){const h=new i(e,t,this.scope?s.bind(this.scope):s,{capture:r,once:n,passive:o},this.prefix);return h.target?(h.target.addEventListener(h.type,h.listener,h.options),this.listener_.push(h)-1):(console.warn("Unable to find event target: ",e),null)}listenOnce(e,t,s,i=!1,r=!0,n=!1){return this.listen(e,t,s,i,r,n)}unlisten(e){const t=this.listener_[e];if(!t)throw new Error(`Unknown listener key: ${e}!`);const{target:s,type:i,listener:r,options:n}=t;s.removeEventListener(i,r,n),delete this.listener_[e]}getLength(){return this.listener_.length-1}}const n="install",o="activate",h="fetch";var l=s(80213);class a{constructor(){this.prefix="[Preview Service]",this.events=new r("Service Worker: Preview","",this),this.registered=!1,this.allowList=location.host.endsWith(".github.io")?/^(http|https):\/\/([^/]+)\/([^/]+)\/preview\/[^/]+\/?/:/^(http|https):\/\/([^/]+)\/preview\/[^/]+\/?/,this.counter=0}register(){this.registered?console.warn(`${this.prefix} Service Worker is already registered !`):(console.log(`${this.prefix} Add event listener ...`),this.events.listen(self,o,this.activate),this.events.listen(self,n,this.install),this.events.listen(self,h,this.fetch),this.registered=!0,console.log(`${this.prefix} Registered Service Worker with cache ${l.DK} ...`))}activate(e){console.log(`${this.prefix} Activate Service Worker ...`,e)}install(){console.log(`${this.prefix} Install Service Worker ...`)}fetch(e){if(null!=e.request&&this.allowList.test(e.request.url))if("POST"===e.request.method)e.respondWith(caches.open(l.DK).then((t=>e.request.text().then((s=>{const i=new Response(s);return t.put(e.request,i.clone()),i})))));else if("GET"===e.request.method){if(e.request.url.endsWith(l.qT+"healthz"))return void e.respondWith(new Response("OK"));if(e.request.url.endsWith(l.qT+"preview/test123"))return void e.respondWith(new Response("Hello World! "+this.counter++));e.respondWith(caches.match(e.request).then((e=>e||new Response("Not found"))))}}static async saveHTMLFile(e,t){return a.saveFile(e,t,"text/html; charset=utf-8")}static async addAssetFile(e,t,s){try{const i=s.split(":")[1].split(";")[0];fetch(s).then((e=>e.blob())).then((s=>{a.saveFile(e+"/"+t,s,i)}))}catch(e){console.error("Could not add asset: ",e)}}static async saveFile(e,t,s="text/plain; charset=utf-8"){e.startsWith(l.qT+"preview/")||(e=e.startsWith(l.qT)?e.slice(l.qT.length)+l.qT+"preview"+e:l.qT+"preview/"+e);const i=await caches.open(l.DK),r=e,n=new Response(t,{headers:{"Content-Type":s}});console.log("[Preview Service] Save preview file",r,n),await i.put(r,n)}}(new a).register()})();