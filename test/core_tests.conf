/**
 * @fileoverview Core tests config file.
 *
 * @license Copyright 2015 The Coding with Chrome Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author mbordihn@google.com (Markus Bordihn)
 */


module.exports = function(config) {
  let files = [
    {pattern: 'genfiles/third_party/external/codemirror/codemirror.js'},
    {pattern: 'genfiles/third_party/external/codemirror/addons.js'},
    {pattern: 'genfiles/third_party/external/codemirror/modes.js'},
    {pattern: 'genfiles/third_party/external/jshint/jshint.js'},
    {pattern: 'genfiles/third_party/external/htmlhint/htmlhint.js'},
    {pattern: 'genfiles/third_party/external/coffeescript/coffee-script.js'},
    {pattern: 'genfiles/third_party/external/coffeelint/coffeelint.js'},
    {pattern: 'genfiles/third_party/external/material-design-lite/material.min.js'},
    {pattern: 'genfiles/third_party/external/dialog-polyfill/dialog-polyfill.js'},
    {pattern: 'genfiles/third_party/external/shepherd/tether.min.js'},
    {pattern: 'genfiles/third_party/external/shepherd/shepherd.min.js'},

    {pattern: 'genfiles/third_party/external/blockly/blockly_compressed.js'},
    {pattern: 'genfiles/third_party/external/blockly/blocks_compressed.js'},
    {pattern: 'genfiles/third_party/external/blockly/javascript_compressed.js'},
    {pattern: 'genfiles/third_party/external/blockly/audio_preload_patch.js'},
    {pattern: 'genfiles/third_party/external/blockly/msg/en.js'},

    {pattern: 'genfiles/core/js/cwc_blocks.js'},
    {pattern: 'genfiles/core/js/cwc_ui.js', watched: false},

    {pattern: 'genfiles/core/frameworks/internal/**/*', included: false},
    {pattern: 'genfiles/core/js/locales/*.js', included: false},
    {pattern: 'genfiles/third_party/external/blockly/media/**/*', included: false},
    {pattern: 'genfiles/third_party/frameworks/external/**/*', included: false},
    {pattern: 'static_files/resources/**/*', included: false},

    {pattern: 'test/mode_tests/**/*_test.js'},
  ];

  let proxies = {
    "/external/blockly/media/": "/base/genfiles/third_party/external/blockly/media/",
    "/frameworks/external/": "/base/genfiles/third_party/frameworks/external/",
    "/frameworks/internal/": "/base/genfiles/core/frameworks/internal/",
    "/js/locales/": "/base/genfiles/core/js/locales/",
    "/resources/": "/base/static_files/resources/",
  };

  config.set({
    basePath: '../',
    colors: true,
    logLevel: config.LOG_WARN,
    frameworks: ['jasmine', 'closure'],
    files: files,
    proxies: proxies,
    singleRun: true,
    browsers: ['Chrome'],
    customLaunchers: {
      Chrome_travis_ci: {
        base: 'Chrome',
        flags: ['--no-sandbox']
      }
    },
    autoWatch: false
  });

  if (process.env.TRAVIS) {
    config.browsers = ['Chrome_travis_ci'];
  }
};
